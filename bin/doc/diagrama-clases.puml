@startuml

title Diagrama de clases ejercicio Puerto


package domain{

	class Puerto {
	-{static} CANTIDAD_AMARRES: int
	
	-alquileres: List<Alquiler>
	-amarres: List<Amarre>
	
	-alquileresActivos: int
	-alquileresFinalizados: int
	
	+mostrarAmarres(): void
	-mostrarEstadoAmarre(estado: Boolean): Integer
		+amarresLibres(): Integer
		+amarresOcupados(): Integer
	+totalAmarres(): Integer
	
	+iniciarAlquiler(cte: Cliente, amr: int, bco: Barco): void
	+finalizarAlquiler(amarreFinalizar: int, diaFinal: Integer): void
	+mostrarAlquileres(): void
	
	+alquileresActivos(): void
	+alquileresFinalizados(): void
	+totalAlquileres(): void
	+mostrarAlquileresNoFinalizados(): void
	}
		note left of Puerto
	*CANTIDAD_AMARRES: Es una constante 
	que servira para definir cuantos 
	amarres crear al momento de la 
	creacion del puerto
		end note
	
		note right of Puerto
	*alquileresActivos y alquileresFinalizados:
	serviran de contadores, inicializados en 0
		end note
	

	class Alquiler {
	-idAlquiler: Long
	-cliente: Cliente
	-amarre: Amarre
	-barco: Barco
	
	-alquilerDiaInicial: Integer = 1
	-alquilerDiaFinal: Integer = null
	-totalAPagar: Integer
	-{static} nextValueAlquiler: Long
	
	+getIdAmarre(): Long
	+getPrecioBarco(): int
	+getPosicionAmarre(): int
	+getClienteNombre(): String
	+getClienteApellido(): String
	
	+mostrarAlquileres(): String
	+estaFinalizado(): Boolean
	}
	
		note right of Alquiler
	*alquilerDiaInicial y alquilerDiaFinal: 
	seteados inicialmente por default
	*nextValueAlquiler: auxiliar para increementar
	idAlquiler en cada instancia
		end note
	

	class Amarre {
	+id = 001L
	+posicion = 0
	+estaLibre
	+nextValueId = 100L
	+nextValuePosicion = 1
	
	-ocuparAmarre()
	-liberarAmarre()
	+mostrarAmarres(): void
	}
	
		note left of Amarre
	*nextValueId y nextValuePosicion:
	auxiliares para increementar
	posicion y id en cada instancia
		end note


	class Cliente {
	-nombre: String
	-apellido: String
	-dni: String
	
	+mostrarCliente(): void
	
	}
	

	abstract class Barco {
	-matricula: String
	-eslora: Double
	-anioFabricacion: int
	
	+getPrecio(): int
	+mostrarBarco(): String
	}
	
	
	class Velero{
	-{static} PRECIO: int
	-precio: int
	
	+getPrecio(): int
	}
	
	
	class Yate{
	-{static} PRECIO: int
	-precio: int
	
	+getPrecio(): int
	}
	
	
	class Catamaran{
	-{static} PRECIO: int
	-precio: int
	
	+getPrecio(): int
	}
	
	
	class Lancha{
	-{static} PRECIO: int
	-precio: int
	
	+getPrecio(): int
	}
	
	
	class MotoAcuatica{
	-{static} PRECIO: int
	-precio: int
	
	+getPrecio(): int
	}
	
	
	class Anfibio{
	-{static} PRECIO: int
	-precio: int
	
	-cantidadRuedas: int
	-velocidadTierra: Double
	
	+getPrecio(): int
	
	+mostrarRuedas(ruedas: int): int
	+mostrarVelocidadTierra(velocidadTierra: Double): Double
	
	+mostrarAnfibio(): String
	}
	
	
	interface InterfaceAnfibio{
	+mostrarRuedas(ruedas: int): int
	+mostrarVelocidadTierra(velocidadTierra: Double): Double
	
	+mostrarAnfibio(): String
	}
}

	package test{
	class PuertotTest
	}
	
	
	
Puerto --> Alquiler
Alquiler -down-> Cliente
Alquiler -left-> Amarre

Alquiler -down-> Barco

Barco <|-- Velero
Barco <|-- Yate
Barco <|-- Catamaran
Barco <|-- Lancha
Barco <|-left- Anfibio
Barco <|-- MotoAcuatica

InterfaceAnfibio <|.down. Anfibio



@enduml